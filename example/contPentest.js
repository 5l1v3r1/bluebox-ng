// #!/usr/bin/env node

// /*
//   Copyright Sergio García <s3rgio.gr@gmail.com
//             Jesús Pérez <jesusprubio@fsf.org>

//   This code may only be used under the MIT license found at
//   https://opensource.org/licenses/MIT.
// */

// VoIP continuos pentesting example. Published here:
// - http://www.securitybydefault.com/2015/01/bluebox-ng-howto-ii.html (Spanish)

// 'use strict';

// TODO: Upgrade. But make a library before when we drop the
// framework part, ie: continuos pentesting. It's goign to be
// really simple, we only will have to define a profile and run the auto module.

// const BlueboxCli = require('../../').Cli;
// const async = require('async');

// const cli = new BlueboxCli();
// const shodanKey = '';

// const finalReport = {};
// const targetHost = '';
// const moduleOptions = {
//   ip: targetHost,
//   rhost: targetHost,
//   rhosts: targetHost,
//   srcHost: 'iface:<The name of your network interface>',
// };


// async.series([
//   (callback) => {
//     const action = 'shodanHost';

//     if (shodanKey) {
//       cli.shodanKey = shodanKey;
//       console.log('Searching host in Shodan...');

//       cli.runModule(action, moduleOptions, (err, result) => {
//         if (err) {
//           callback(err);
//         } else {
//           finalReport[action] = result;
//           callback(null);
//         }
//       });
//     } else {
//       console.error('No Shodan Key found.');
//       callback(null);
//     }
//   },
//   (callback) => {
//     const action = 'sipScan';

//     console.log('SIP scanning...');
//     cli.runModule(action, moduleOptions, (err, result) => {
//       if (err) {
//         callback(err);
//       } else {
//         console.log(`${result[0].service} ${result[0].version} found.`);
//         finalReport[action] = result;
//         callback(null);
//       }
//     });
//   },
//   (callback) => {
//     const action = 'exploitSearch';

//     moduleOptions.query = `${finalReport.sipScan[0].service} ${finalReport.sipScan[0].version}`;
//     console.log(`Looking for exploits for ${moduleOptions.query}...`);
//     cli.runModule(action, moduleOptions, (err, result) => {
//       if (err) {
//         callback(err);
//       } else {
//         finalReport[action] = result;
//         callback(null);
//       }
//     });
//   },
//   (callback) => {
//     const action = 'sipBruteExt100';

//     cli.runModule(action, moduleOptions, (err, result) => {
//       if (err) {
//         callback(err);
//       } else {
//         if (result.vulnerable) {
//           console.log('The host is vulnerable to CVE-2011-2536 / AST-2011-011');
//         } else {
//           console.log('The host is NOT vulnerable to CVE-2011-2536 / AST-2011-011');
//         }
//         finalReport[action] = result;
//         callback(null);
//       }
//     });
//   },
//   (callback) => {
//     const action = 'sipBruteExt404';

//     cli.runModule(action, moduleOptions, (err, result) => {
//       if (err) {
//         callback(err);
//       } else {
//         if (result.vulnerable) {
//           console.log('The host is vulnerable to CVE-2009-3727 / AST-2009-008');
//         } else {
//           console.log('The host is NOT vulnerable to CVE-2009-3727 / AST-2009-008');
//         }
//         finalReport[action] = result;
//         callback(null);
//       }
//     });
//   },
//   (callback) => {
//     const action = 'sipUnauthCall';

//     cli.runModule(action, moduleOptions, (err, result) => {
//       if (err) {
//         callback(err);
//       } else {
//         if (result.vulnerable) {
//           console.log('[sipUnauthCall] Host vulnerable');
//         }
//         finalReport[action] = result;
//         callback(null);
//       }
//     });
//   },
// ],
// (err) => {
//   if (err) {
//     console.error(err);
//   } else {
//     console.log(finalReport);
//   }
// });
