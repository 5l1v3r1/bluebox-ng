/*
  Copyright Jesús Pérez <jesusprubio@gmail.com>

  This code may only be used under the GPLv3 license found at
  http://www.gnu.org/licenses/gpl-3.0.txt.
*/

'use strict';

const test = require('tap').test; // eslint-disable-line import/no-extraneous-dependencies

const method = require('../../lib/index/exploitSearch');
const utils = require('../../lib/utils');
const errMsgs = require('../../lib/utils/errorMsgs');


test('with valid "query"', (assert) => {
  assert.plan(2);

  method('asterisk')
  .then((res) => {
    // They should be quite more.
    assert.equal((res.length > 30), true);
    // We only check the first (#kiss).
    assert.deepEqual(utils.keys(res[0]), [
      'name', 'src', 'id', 'info', 'exploits',
      'refs', 'tools', 'links', 'dates',
    ]);
  });
});


test('with valid "query" and options', (assert) => {
  assert.plan(2);

  method('asterisk', { exploitsOnly: true })
  .then((res) => {
    // They should be quite more.
    assert.equal((res.length > 30), true);
    // We only check the first (#kiss).
    assert.deepEqual(utils.keys(res[0]), [
      'name', 'src', 'id', 'info', 'exploits',
      'refs', 'tools', 'links', 'dates',
    ]);
  });
});


test('without parameters', (assert) => {
  assert.plan(1);

  method()
  .then(() => assert.fail('should fail.'))
  .catch(err => assert.equal(err.message, errMsgs.paramReq));
});


test('with bad option ("exploitsOnly")', (assert) => {
  assert.plan(1);

  method('asterisk', { exploitsOnly: 'a' })
  .then(() => assert.fail('should fail.'))
  .catch(err => assert.equal(err.message, errMsgs.paramBad));
});


test('with bad option ("timeout")', (assert) => {
  assert.plan(1);

  method('asterisk', { timeout: 'a' })
  .then(() => assert.fail('should fail.'))
  .catch(err => assert.equal(err.message, errMsgs.paramBad));
});
